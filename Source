#Solutions to Assignment 1 for Python Training
#Author: Dylan Collins
#Desc: A source repitoire of all problems given in assignment 1. Should be able to run the enitre file without error so long as approproate 
#number of command line arguments are given for problem 5. Otherwise, each problem is labled. 

#-PROBLEM 1-
import random as r

x = r.randint(1, 101)
y = r.randint(1,101)
print(x + y)
print(x - y)
print(x * y)
print(x / y)

#-PROBLEM 2-
import random as r

x = r.randint(1, 101)
y = r.randint(1, 101)
z = r.randint(1, 101)

if(x > y):
  if(x > z):
    print("X is the largest.")
  else:
    print("Y is the largest.")
else:
  if(y > z):
    print("Y is the largest.")
  else:
    print("Z is the largest.")
    
#-PROBLEM 3-
import random as r

x = r.randint(1, 101)

if(x % 2 == 0):
  print("Num is even.")
else:
  print("Num is odd.")

#-PROBLEM 4-
#The most straightforward solution, though likely not the most optimal.

import random as r
from math import sqrt; from itertools import count, islice

def is_prime(n):
    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))

x = r.randint(2, 101)
print(is_prime(x))

#-PROBLEM 5(a)
import sys as s

for x in range(1, 6):
  print("Element", x, ":", s.argv[x])

#-PROBLEM 5(b)
import sys as s

print(max(s.argv))

#-PROBLEM 6-
x = input("Enter a string: ")
print(list(x),"\n")
print(x[0:(int(len(x) / 2))])
print(x[int(len(x) / 2): len(x)])

def repeat_num_times(string_to_expand, length):
    return (string_to_expand * (int(length/len(string_to_expand))+1))[:length]

print("\n",repeat_num_times(x, 100))

y = input("\nEnter another string: ")

print(x + y)

#-PROBLEM 7-
l = []

for x in range(1, 11):
  l.append(x)

print(l)
print(l[0: int(len(l) / 2)])
print(l[int(len(l) / 2): len(l)])

def repeat_num_times(list_to_expand, length):
    return (list_to_expand * (int(length/len(list_to_expand))+1))[:length]

print(repeat_num_times(l, 50))

l2 = []

for x in range(11, 21):
  l2.append(x)

print(l + l2)

#-PROBLEM 8-
l = (1,2,3,4,5,6,7,8,9,10)

print(l)
print(l[0: int(len(l) / 2)])
print(l[int(len(l) / 2): len(l)])

def repeat_num_times(list_to_expand, length):
    return (list_to_expand * (int(length/len(list_to_expand))+1))[:length]

print(repeat_num_times(l, 50))

l2 = (11,12,13,14,15,16,17,18,19,20)

print(l + l2)

#-PROBLEM 9-
print("Given 5+3j and 4-7j as type complex:\n")
print("Addition:",(5+3j)+(4-7j))
print("Subtraction:",(5+3j)-(4-7j))
print("Multiplication:",(5+3j)*(4-7j))
print("Division:",(5+3j)/(5-7j))

#-PROBLEM 10-
x = int(input("Enter First Num: "))
y = int(input("Enter Seond Num: "))
z = x
z += y
print("\nAddition:", z)
z = x
z-= y
print("Subtraction:", z)
z = x
z *= y
print("Multipication:", z)
z = x
z /= y
print("Division:", z)
z = x
z %= y
print("Modulus:", z)
z = x
z**=y
print("Exponentiation:", z)
z = x
z//= y
print("Floor Division", z)

#-PROBLEM 11-
a = int(input("Enter first binary num: "))
b = int(input("Enter second binary num: "))

print("Logical AND:", a & b)
print("Logical OR:", a | b)
print("Logical XOR", a ^ b)
print("Logical ONE'S COMPLIMENT on a:", ~a)
print("Logical ONE'S COMPLIMENT on b:", ~b)
print("Logical LEFT SHIFT on a by 2:", a << 2)
print("Logical LEFT SHIFT on b by 2:", b << 2)
print("Logical RIGHT SHIFT on a by 2:", a >> 2)
print("Logical RIGHT SHIFT on b by 2:", b >> 2)

#-PROBLEM 12-
import statistics as stat

l = []
for x in range(10):
  l.append(int(input("Enter num: ")))

m = stat.mean(l)
print("Mean:", m)

lessList = []
equals = 0

for n in l:
  if(n < m):
    lessList.append(n)
  elif(n == m):
    equals += 1

print("There are", len(lessList), "elements less than the mean. They are:", lessList)
print("There are", equals, "elements equal to the means.")
print("There are", 10 - (len(lessList) + equals), "elements greater than the mean.")

#-PROBLEM 13-
l = []

for x in range(4):
  l.append(int(input("Enter Num:")))

leftBig = 0
rightBig = 0
biggest = 0

if(l[0] > l[1]):
  leftBig = l[0]
else:
  leftBig = l[1]

if(l[2] > l[3]):
  rightBig = l[2]
  if(rightBig > leftBig):
    biggest = rightBig
  else:
    biggest = leftBig
else:
  rightBig = l[3]
  if(rightBig > leftBig):
    biggest = rightBig
  else:
    biggest = leftBig

print("Biggest of four:", biggest)

l.append(int(input("Enter another num: ")))
center = l[2]

if(l[0] > l[1]):
  leftBig = l[0]
  if(l[3] > l[4]):
    rightBig = l[3]
    if(leftBig > rightBig):
      if(leftBig > center):
        biggest = leftBig
      else:
        biggest = center
    else:
      if(rightBig > center):
        biggest = rightBig
      else:
        biggest = center
  else:
    rightBig = l[4]
    if(leftBig > rightBig):
      if(leftBig > center):
        biggest = leftBig
      else:
        biggest = center
    else:
      if(rightBig > center):
        biggest = rightBig
      else:
        biggest = center
else:
  leftBig = l[1]
  if(l[3] > l[4]):
    rightBig = l[3]
    if(leftBig > rightBig):
      if(leftBig > center):
        biggest = leftBig
      else:
        biggest = center
    else:
      if(rightBig > center):
        biggest = rightBig
      else:
        biggest = center
  else:
    rightBig = l[4]
    if(leftBig > rightBig):
      if(leftBig > center):
        biggest = leftBig
      else:
        biggest = center
    else:
      if(rightBig > center):
        biggest = rightBig
      else:
        biggest = center

print("Biggest of 5:",biggest)

#-PROBLEM 14-
ids = [1,2,3,4,5,6,7,8,9,10]
names = ["Bob", "John", "Tim", "Leon", "Ludwig", "Chris", "Larry", "Ryuji", "Doug", "Peter"]

for x in names:
  print(x)

i = int(input("Enter Index:"))
print(names[i], "->", ids[i])

print("\n")

for n in range(3,9):
  print(names[n])

print("\n")

for n in range(2, len(names)):
  print(names[n])

n = int(input("Enter n:"))

for i in names:
  for i2 in range(n):
    print(i)

for i in ids:
  for i2 in range(n):
    print(i)

print(names + ids)

for i in range(10):
  print(names[i], "->", ids[i])
  
#-PROBLEM 15-
l = ["Bob", "John", "Ryuji", "Leon", "Tim"]
print("Bob" in l) #True
print("Danny" in l) #False

inList = False
n = input("Enter name to search: ")

for x in l:
  if(x == n):
    inList = True

print("In List:", inList)

for x in range(0, 5):
  print(l[(len(l) - 1) - x])
  
#-PROBLEM 16-
from math import sqrt; from itertools import count, islice

n = int(input("Enter num: "))

print("Prime:", n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1))))

n = int(input("Enter nax num: "))

for x in range(2, n):
  if(x > 1 and all(x%i for i in islice(count(2), int(sqrt(x)-1))) == True):
    print(x)
    
#-PROBLEM 17-
def findMax(t):
  return max(t)

def findMind(t):
  return min(t)

l = []
num = int(input("How many numbers do you want to enter: "))

for x in range(num):
  l.append(int(input("Enter num: ")))

print(findMax(l))
print(findMind(l))

#-PROBLEM 18-
l = []

#Populate List
for x in range(1, 101):
  l.append(x)

for x in l:
  print (x, end = " ")

print("\n")

for x in range(0, 100):
  print(l[len(l) - 1] - x, end = " ")

print("\n")
i = 0
i2 = 99

while(i < 100):
  print(l[i], end=" ")
  i += 1

print("\n")

while(i2 >= 0):
  print(l[i2], end = " ")
  i2 -= 1

print("\n")

myString = "Hello world"

for let in myString:
  print(let)
  
#-PROBLEM 19-

for x in range(1,101):
  if(x == 50):
    break
    continue
  else:
    if(x % 10 == 0):
      continue
    else:
      if(x % 2 == 0):
        print(x, end = " ")
      else:
        pass
        
num = 1

while(num < 101):
  if(num == 90):
    break
    continue
  if(num % 10 == 0):
    num+=1
    continue
  else:
    if(num % 2 == 0):
      print(num, end = " ")
      num+= 1
    else:
      num+= 1
      pass
        
#-PROBLEM 20-
#An iterative example as opposed to a recursive example.

n1 = 0
n2 = 1
count = 0

nterms = int(input("Enter the nth term: "))

if nterms <= 0:
   print("Error. Number is negative")
elif nterms == 1:
   print(nterms)
   print(n1)
else:
   print(nterms)
   while count < nterms:
       print(n1, end=', ')
       nth = n1 + n2
       n1 = n2
       n2 = nth
       count += 1
